function cov_1cehgvzxf4(){var path="/Users/deepgill/CPSC-319/TerraScanBackEnd/terraform/index.js";var hash="896d9157127af67f3dcae57bcf5f31a713ca9121";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/deepgill/CPSC-319/TerraScanBackEnd/terraform/index.js",statementMap:{"0":{start:{line:1,column:0},end:{line:3,column:1}},"1":{start:{line:2,column:4},end:{line:2,column:39}},"2":{start:{line:5,column:11},end:{line:5,column:24}},"3":{start:{line:6,column:17},end:{line:6,column:36}},"4":{start:{line:7,column:18},end:{line:7,column:40}},"5":{start:{line:11,column:26},end:{line:11,column:74}},"6":{start:{line:12,column:19},end:{line:12,column:43}},"7":{start:{line:13,column:4},end:{line:13,column:26}},"8":{start:{line:23,column:21},end:{line:23,column:22}},"9":{start:{line:24,column:23},end:{line:24,column:52}},"10":{start:{line:25,column:15},end:{line:28,column:6}},"11":{start:{line:30,column:4},end:{line:45,column:5}},"12":{start:{line:31,column:8},end:{line:31,column:20}},"13":{start:{line:32,column:8},end:{line:44,column:9}},"14":{start:{line:37,column:12},end:{line:43,column:13}},"15":{start:{line:42,column:16},end:{line:42,column:50}},"16":{start:{line:47,column:4},end:{line:47,column:62}},"17":{start:{line:50,column:0},end:{line:53,column:1}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:1,column:15},end:{line:1,column:16}},loc:{start:{line:1,column:41},end:{line:3,column:1}},line:1},"1":{name:"TerraformToJSON",decl:{start:{line:9,column:9},end:{line:9,column:24}},loc:{start:{line:9,column:35},end:{line:14,column:1}},line:9},"2":{name:"getLineNumber",decl:{start:{line:22,column:15},end:{line:22,column:28}},loc:{start:{line:22,column:51},end:{line:48,column:1}},line:22}},branchMap:{"0":{loc:{start:{line:32,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:32,column:8},end:{line:44,column:9}},{start:{line:32,column:8},end:{line:44,column:9}}],line:32},"1":{loc:{start:{line:33,column:12},end:{line:35,column:31}},type:"binary-expr",locations:[{start:{line:33,column:12},end:{line:33,column:37}},{start:{line:34,column:12},end:{line:34,column:31}},{start:{line:35,column:12},end:{line:35,column:31}}],line:33},"2":{loc:{start:{line:37,column:12},end:{line:43,column:13}},type:"if",locations:[{start:{line:37,column:12},end:{line:43,column:13}},{start:{line:37,column:12},end:{line:43,column:13}}],line:37}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"896d9157127af67f3dcae57bcf5f31a713ca9121"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1cehgvzxf4=function(){return actualCoverage;};}return actualCoverage;}cov_1cehgvzxf4();cov_1cehgvzxf4().s[0]++;exports.push=async(event,context)=>{cov_1cehgvzxf4().f[0]++;cov_1cehgvzxf4().s[1]++;console.log('Terraform Root Files');};const fs=(cov_1cehgvzxf4().s[2]++,require('fs'));const readLine=(cov_1cehgvzxf4().s[3]++,require('readline'));const hcltojson=(cov_1cehgvzxf4().s[4]++,require('hcl-to-json'));function TerraformToJSON(filepath){cov_1cehgvzxf4().f[1]++;// Verify filename is a terraform file?? Is it the responsibility of this function?
const terraformFile=(cov_1cehgvzxf4().s[5]++,fs.readFileSync(filepath,{encoding:'utf-8'}));const result=(cov_1cehgvzxf4().s[6]++,hcltojson(terraformFile));cov_1cehgvzxf4().s[7]++;return result.resource;}// - Arguments
//     - type and name are strings associated with the resource, they form the resource id
// - It is assumed that type and name are on the same line
// - returns
//      - resolved Promise with line number if required resource exists in the file
//      - rejected Promise with error if line does not exist in file
async function getLineNumber(filepath,type,name){cov_1cehgvzxf4().f[2]++;let lineNumber=(cov_1cehgvzxf4().s[8]++,0);const fileStream=(cov_1cehgvzxf4().s[9]++,fs.createReadStream(filepath));const rl=(cov_1cehgvzxf4().s[10]++,readLine.createInterface({input:fileStream,crlfDelay:Infinity}));cov_1cehgvzxf4().s[11]++;for await(const line of rl){cov_1cehgvzxf4().s[12]++;lineNumber++;cov_1cehgvzxf4().s[13]++;if((cov_1cehgvzxf4().b[1][0]++,line.includes('resource'))&&(cov_1cehgvzxf4().b[1][1]++,line.includes(type))&&(cov_1cehgvzxf4().b[1][2]++,line.includes(name))){cov_1cehgvzxf4().b[0][0]++;cov_1cehgvzxf4().s[14]++;if(line.indexOf('resource')<line.indexOf(type)<line.indexOf(name)){cov_1cehgvzxf4().b[2][0]++;cov_1cehgvzxf4().s[15]++;return Promise.resolve(lineNumber);}else{cov_1cehgvzxf4().b[2][1]++;}}else{cov_1cehgvzxf4().b[0][1]++;}}cov_1cehgvzxf4().s[16]++;return Promise.reject(new Error('The line was not found'));}cov_1cehgvzxf4().s[17]++;module.exports={TerraformToJSON,getLineNumber};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJwdXNoIiwiZXZlbnQiLCJjb250ZXh0IiwiY29uc29sZSIsImxvZyIsImZzIiwicmVxdWlyZSIsInJlYWRMaW5lIiwiaGNsdG9qc29uIiwiVGVycmFmb3JtVG9KU09OIiwiZmlsZXBhdGgiLCJ0ZXJyYWZvcm1GaWxlIiwicmVhZEZpbGVTeW5jIiwiZW5jb2RpbmciLCJyZXN1bHQiLCJyZXNvdXJjZSIsImdldExpbmVOdW1iZXIiLCJ0eXBlIiwibmFtZSIsImxpbmVOdW1iZXIiLCJmaWxlU3RyZWFtIiwiY3JlYXRlUmVhZFN0cmVhbSIsInJsIiwiY3JlYXRlSW50ZXJmYWNlIiwiaW5wdXQiLCJjcmxmRGVsYXkiLCJJbmZpbml0eSIsImxpbmUiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkVycm9yIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiNnhGQWVZO21IQWZaQSxPQUFPLENBQUNDLElBQVIsQ0FBZSxNQUFPQyxLQUFQLENBQWNDLE9BQWQsR0FBMEIsaURBQ3JDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxzQkFBWixFQUNILENBRkQsQ0FJQSxLQUFNQyxDQUFBQSxFQUFFLDBCQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFWLENBQVIsQ0FDQSxLQUFNQyxDQUFBQSxRQUFRLDBCQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFWLENBQWQsQ0FDQSxLQUFNRSxDQUFBQSxTQUFTLDBCQUFHRixPQUFPLENBQUMsYUFBRCxDQUFWLENBQWYsQ0FFQSxRQUFTRyxDQUFBQSxlQUFULENBQXlCQyxRQUF6QixDQUFtQyx5QkFDL0I7QUFDQSxLQUFNQyxDQUFBQSxhQUFhLDBCQUFHTixFQUFFLENBQUNPLFlBQUgsQ0FBZ0JGLFFBQWhCLENBQTBCLENBQUVHLFFBQVEsQ0FBRSxPQUFaLENBQTFCLENBQUgsQ0FBbkIsQ0FDQSxLQUFNQyxDQUFBQSxNQUFNLDBCQUFHTixTQUFTLENBQUNHLGFBQUQsQ0FBWixDQUFaLENBSCtCLHdCQUkvQixNQUFPRyxDQUFBQSxNQUFNLENBQUNDLFFBQWQsQ0FDSCxDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWVDLENBQUFBLGFBQWYsQ0FBNkJOLFFBQTdCLENBQXVDTyxJQUF2QyxDQUE2Q0MsSUFBN0MsQ0FBbUQseUJBQy9DLEdBQUlDLENBQUFBLFVBQVUsMEJBQUcsQ0FBSCxDQUFkLENBQ0EsS0FBTUMsQ0FBQUEsVUFBVSwwQkFBR2YsRUFBRSxDQUFDZ0IsZ0JBQUgsQ0FBb0JYLFFBQXBCLENBQUgsQ0FBaEIsQ0FDQSxLQUFNWSxDQUFBQSxFQUFFLDJCQUFHZixRQUFRLENBQUNnQixlQUFULENBQXlCLENBQ2hDQyxLQUFLLENBQUVKLFVBRHlCLENBRWhDSyxTQUFTLENBQUVDLFFBRnFCLENBQXpCLENBQUgsQ0FBUixDQUgrQyx5QkFRL0MsVUFBVyxLQUFNQyxDQUFBQSxJQUFqQixHQUF5QkwsQ0FBQUEsRUFBekIsQ0FBNkIsMEJBQ3pCSCxVQUFVLEdBRGUseUJBRXpCLEdBQ0ksNEJBQUFRLElBQUksQ0FBQ0MsUUFBTCxDQUFjLFVBQWQsZ0NBQ0FELElBQUksQ0FBQ0MsUUFBTCxDQUFjWCxJQUFkLENBREEsK0JBRUFVLElBQUksQ0FBQ0MsUUFBTCxDQUFjVixJQUFkLENBRkEsQ0FESixDQUlFLHFEQUNFLEdBQ0lTLElBQUksQ0FBQ0UsT0FBTCxDQUFhLFVBQWIsRUFDQUYsSUFBSSxDQUFDRSxPQUFMLENBQWFaLElBQWIsQ0FEQSxDQUVBVSxJQUFJLENBQUNFLE9BQUwsQ0FBYVgsSUFBYixDQUhKLENBSUUscURBQ0UsTUFBT1ksQ0FBQUEsT0FBTyxDQUFDQyxPQUFSLENBQWdCWixVQUFoQixDQUFQLENBQ0gsQ0FORCxpQ0FPSCxDQVpELGlDQWFILENBdkI4Qyx5QkF5Qi9DLE1BQU9XLENBQUFBLE9BQU8sQ0FBQ0UsTUFBUixDQUFlLEdBQUlDLENBQUFBLEtBQUosQ0FBVSx3QkFBVixDQUFmLENBQVAsQ0FDSCxDLHlCQUVEQyxNQUFNLENBQUNuQyxPQUFQLENBQWlCLENBQ2JVLGVBRGEsQ0FFYk8sYUFGYSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucHVzaCA9IGFzeW5jIChldmVudCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdUZXJyYWZvcm0gUm9vdCBGaWxlcycpXG59XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuY29uc3QgcmVhZExpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpXG5jb25zdCBoY2x0b2pzb24gPSByZXF1aXJlKCdoY2wtdG8tanNvbicpXG5cbmZ1bmN0aW9uIFRlcnJhZm9ybVRvSlNPTihmaWxlcGF0aCkge1xuICAgIC8vIFZlcmlmeSBmaWxlbmFtZSBpcyBhIHRlcnJhZm9ybSBmaWxlPz8gSXMgaXQgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoaXMgZnVuY3Rpb24/XG4gICAgY29uc3QgdGVycmFmb3JtRmlsZSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlcGF0aCwgeyBlbmNvZGluZzogJ3V0Zi04JyB9KVxuICAgIGNvbnN0IHJlc3VsdCA9IGhjbHRvanNvbih0ZXJyYWZvcm1GaWxlKVxuICAgIHJldHVybiByZXN1bHQucmVzb3VyY2Vcbn1cbiAgIFxuLy8gLSBBcmd1bWVudHNcbi8vICAgICAtIHR5cGUgYW5kIG5hbWUgYXJlIHN0cmluZ3MgYXNzb2NpYXRlZCB3aXRoIHRoZSByZXNvdXJjZSwgdGhleSBmb3JtIHRoZSByZXNvdXJjZSBpZFxuLy8gLSBJdCBpcyBhc3N1bWVkIHRoYXQgdHlwZSBhbmQgbmFtZSBhcmUgb24gdGhlIHNhbWUgbGluZVxuLy8gLSByZXR1cm5zXG4vLyAgICAgIC0gcmVzb2x2ZWQgUHJvbWlzZSB3aXRoIGxpbmUgbnVtYmVyIGlmIHJlcXVpcmVkIHJlc291cmNlIGV4aXN0cyBpbiB0aGUgZmlsZVxuLy8gICAgICAtIHJlamVjdGVkIFByb21pc2Ugd2l0aCBlcnJvciBpZiBsaW5lIGRvZXMgbm90IGV4aXN0IGluIGZpbGVcbmFzeW5jIGZ1bmN0aW9uIGdldExpbmVOdW1iZXIoZmlsZXBhdGgsIHR5cGUsIG5hbWUpIHtcbiAgICBsZXQgbGluZU51bWJlciA9IDBcbiAgICBjb25zdCBmaWxlU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlcGF0aClcbiAgICBjb25zdCBybCA9IHJlYWRMaW5lLmNyZWF0ZUludGVyZmFjZSh7XG4gICAgICAgIGlucHV0OiBmaWxlU3RyZWFtLFxuICAgICAgICBjcmxmRGVsYXk6IEluZmluaXR5LFxuICAgIH0pXG5cbiAgICBmb3IgYXdhaXQgKGNvbnN0IGxpbmUgb2YgcmwpIHtcbiAgICAgICAgbGluZU51bWJlcisrXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxpbmUuaW5jbHVkZXMoJ3Jlc291cmNlJykgJiZcbiAgICAgICAgICAgIGxpbmUuaW5jbHVkZXModHlwZSkgJiZcbiAgICAgICAgICAgIGxpbmUuaW5jbHVkZXMobmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbGluZS5pbmRleE9mKCdyZXNvdXJjZScpIDxcbiAgICAgICAgICAgICAgICBsaW5lLmluZGV4T2YodHlwZSkgPFxuICAgICAgICAgICAgICAgIGxpbmUuaW5kZXhPZihuYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShsaW5lTnVtYmVyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignVGhlIGxpbmUgd2FzIG5vdCBmb3VuZCcpKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBUZXJyYWZvcm1Ub0pTT04sXG4gICAgZ2V0TGluZU51bWJlclxufSJdfQ==