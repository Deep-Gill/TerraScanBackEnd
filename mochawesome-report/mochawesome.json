{
  "stats": {
    "suites": 33,
    "tests": 59,
    "passes": 56,
    "pending": 0,
    "failures": 3,
    "start": "2021-11-24T02:56:55.391Z",
    "end": "2021-11-24T02:56:55.674Z",
    "duration": 283,
    "testsRegistered": 97,
    "passPercent": 57.73195876288659,
    "pendingPercent": 0,
    "other": 6,
    "hasOther": true,
    "skipped": 38,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "d6ca566a-38c4-4d69-849e-67531ecc2ae4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c025e494-6f72-4c6b-81a3-7686c38dfffb",
          "title": "restRoot auth endpoints",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/auth.spec.js",
          "file": "/test/restRoot/auth.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"restRoot auth endpoints\"",
              "fullTitle": "restRoot auth endpoints \"before all\" hook in \"restRoot auth endpoints\"",
              "timedOut": false,
              "duration": 33,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await util.setup.deleteCaches()\napp = require('../../amplify/backend/function/restRoot/src/app')\nawait util.setup.db('unittest_auth')",
              "err": {
                "message": "Error: Cannot find module 'express'\nRequire stack:\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/amplify/backend/function/restRoot/src/app.js\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/auth.spec.js",
                "estack": "Error: Cannot find module 'express'\nRequire stack:\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/amplify/backend/function/restRoot/src/app.js\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/auth.spec.js\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:902:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:746:27)\n    at Module.require (internal/modules/cjs/loader.js:974:19)\n    at require (internal/modules/cjs/helpers.js:93:18)\n    at Object.<anonymous> (amplify/backend/function/restRoot/src/app.js:8:41)\n    at Module._compile (internal/modules/cjs/loader.js:1085:14)\n    at Module.replacementCompile (node_modules/append-transform/index.js:60:13)\n    at Module._extensions..js (internal/modules/cjs/loader.js:1114:10)\n    at Object.<anonymous> (node_modules/append-transform/index.js:64:4)\n    at Module.load (internal/modules/cjs/loader.js:950:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:790:12)\n    at Module.require (internal/modules/cjs/loader.js:974:19)\n    at require (internal/modules/cjs/helpers.js:93:18)\n    at Context.<anonymous> (test/restRoot/auth.spec.js:24:15)",
                "diff": null
              },
              "uuid": "0b760cd3-f6bf-4315-8e4a-4f7415985b73",
              "parentUUID": "c025e494-6f72-4c6b-81a3-7686c38dfffb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"restRoot auth endpoints\"",
              "fullTitle": "restRoot auth endpoints \"after all\" hook in \"restRoot auth endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await app.server.close()",
              "err": {
                "message": "TypeError: Cannot read property 'server' of undefined",
                "estack": "TypeError: Cannot read property 'server' of undefined\n    at Context.<anonymous> (test/restRoot/auth.spec.js:30:19)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "7a1e1726-0dd7-4c3c-93df-a06607778da6",
              "parentUUID": "c025e494-6f72-4c6b-81a3-7686c38dfffb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a6034ab4-62f6-4ca8-966f-7d51c0862f44",
              "title": "POST /auth/user",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/auth.spec.js",
              "file": "/test/restRoot/auth.spec.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "restRoot auth endpoints POST /auth/user \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = new Client()\nawait client.connect()\nawait client.query('DELETE FROM users;')\nawait client.end()",
                  "err": {},
                  "uuid": "033b55e6-32e3-42e3-ab7c-8c06b0d1a4f7",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should create a user",
                  "fullTitle": "restRoot auth endpoints POST /auth/user should create a user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/v1/auth/user').send({\n    email: 'test@test.com',\n    password: '1234',\n    github: 'testing',\n})\nexpect(res.status).to.equal(201)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "61dcb9e4-98fe-4d07-9acb-1536a41b5790",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should fail to create user with an invalid email",
                  "fullTitle": "restRoot auth endpoints POST /auth/user should fail to create user with an invalid email",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/v1/auth/user').send({\n    email: 'test not an email',\n    password: '1234',\n    github: 'testing2',\n})\nexpect(res.status).to.equal(400)\nexpect(res.body.error).to.equal('INVALID_EMAIL')",
                  "err": {},
                  "uuid": "56012116-60ee-4d35-a9d5-9453c65b041e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should fail to create user with duplicate email",
                  "fullTitle": "restRoot auth endpoints POST /auth/user should fail to create user with duplicate email",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await chai.request(app).post('/v1/auth/user').send({\n    email: 'test@test.com',\n    password: '1234',\n    github: 'testing',\n})\nexpect(res.status).to.equal(201)\nexpect(res.body).to.be.empty\nres = await chai.request(app).post('/v1/auth/user').send({\n    email: 'test@test.com',\n    password: '1234',\n    github: 'testing2',\n})\nexpect(res.status).to.equal(400)\nexpect(res.body.error).to.equal('DUPLICATE_USER')",
                  "err": {},
                  "uuid": "019e27ff-287c-4418-a601-d4cbbab081d6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should fail to create user with duplicate github",
                  "fullTitle": "restRoot auth endpoints POST /auth/user should fail to create user with duplicate github",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await chai.request(app).post('/v1/auth/user').send({\n    email: 'test@test.com',\n    password: '1234',\n    github: 'testing',\n})\nexpect(res.status).to.equal(201)\nexpect(res.body).to.be.empty\nres = await chai.request(app).post('/v1/auth/user').send({\n    email: 'test2@test.com',\n    password: '1234',\n    github: 'testing',\n})\nexpect(res.status).to.equal(400)\nexpect(res.body.error).to.equal('DUPLICATE_USER')",
                  "err": {},
                  "uuid": "502cabc2-731b-4ba4-aa9c-3fc1942723cc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not accept missing fields",
                  "fullTitle": "restRoot auth endpoints POST /auth/user should not accept missing fields",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cases = [\n    {\n        email: 'test@test.com',\n        password: '1234',\n    },\n    {\n        password: '1234',\n        github: 'testing',\n    },\n    {\n        email: 'test@test.com',\n        github: 'testing',\n    },\n]\nfor await (const testCase of cases) {\n    const res = await chai\n        .request(app)\n        .post('/v1/auth/user')\n        .send(testCase)\n    expect(res.status).to.equal(400)\n    expect(res.body.error).to.equal('MISSING_PARAMETERS')\n}",
                  "err": {},
                  "uuid": "697327ce-b6d4-4bc1-a48a-1f0eb2b1e881",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "61dcb9e4-98fe-4d07-9acb-1536a41b5790",
                "56012116-60ee-4d35-a9d5-9453c65b041e",
                "019e27ff-287c-4418-a601-d4cbbab081d6",
                "502cabc2-731b-4ba4-aa9c-3fc1942723cc",
                "697327ce-b6d4-4bc1-a48a-1f0eb2b1e881"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29b05460-d1bf-48c5-a046-41079cf6fcab",
              "title": "POST /auth/login",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/auth.spec.js",
              "file": "/test/restRoot/auth.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "restRoot auth endpoints POST /auth/login \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await chai.request(app).post('/v1/auth/user').send({\n    email: 'test@test.com',\n    password: '1234',\n    github: 'testing',\n})",
                  "err": {},
                  "uuid": "8fcecb9a-7193-4a43-9b01-9ab28e548dec",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "restRoot auth endpoints POST /auth/login \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = new Client()\nawait client.connect()\nawait client.query('DELETE FROM users;')\nawait client.end()",
                  "err": {},
                  "uuid": "92488127-7d72-49b4-aba0-0387fa1e9f48",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should correctly login",
                  "fullTitle": "restRoot auth endpoints POST /auth/login should correctly login",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/v1/auth/login').send({\n    email: 'test@test.com',\n    password: '1234',\n})\nexpect(res.status).to.equal(200)\nexpect(res?.body?.auth_token).to.be.a('string')",
                  "err": {},
                  "uuid": "31184c77-8235-4d5d-b3f6-9f6b2c878903",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not login with the wrong password",
                  "fullTitle": "restRoot auth endpoints POST /auth/login should not login with the wrong password",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/v1/auth/login').send({\n    email: 'test@test.com',\n    password: '12345',\n})\nexpect(res.status).to.equal(400)\nexpect(res.body.error).to.equal('WRONG_PASSWORD')",
                  "err": {},
                  "uuid": "e4966054-7812-479f-9412-c4f329e04c28",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not login with the wrong email",
                  "fullTitle": "restRoot auth endpoints POST /auth/login should not login with the wrong email",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/v1/auth/login').send({\n    email: 'test2@test.com',\n    password: '1234',\n})\nexpect(res.status).to.equal(400)\nexpect(res.body.error).to.equal('WRONG_EMAIL')",
                  "err": {},
                  "uuid": "004dc27d-6ca8-4eae-badb-c258a1503333",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not accept missing fields",
                  "fullTitle": "restRoot auth endpoints POST /auth/login should not accept missing fields",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cases = [\n    {\n        email: 'test@test.com',\n    },\n    {\n        email: 'test@test.com',\n    },\n]\nfor await (const testCase of cases) {\n    const res = await chai\n        .request(app)\n        .post('/v1/auth/login')\n        .send(testCase)\n    expect(res.status).to.equal(400)\n    expect(res.body.error).to.equal('MISSING_PARAMETERS')\n}",
                  "err": {},
                  "uuid": "19c816ec-186c-42c6-8331-65f56d4a1e89",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "31184c77-8235-4d5d-b3f6-9f6b2c878903",
                "e4966054-7812-479f-9412-c4f329e04c28",
                "004dc27d-6ca8-4eae-badb-c258a1503333",
                "19c816ec-186c-42c6-8331-65f56d4a1e89"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6f498c4f-7e73-455f-96bc-6ff04b44d598",
          "title": "restRoot rules endpoints",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/rules.spec.js",
          "file": "/test/restRoot/rules.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"restRoot rules endpoints\"",
              "fullTitle": "restRoot rules endpoints \"before all\" hook in \"restRoot rules endpoints\"",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await util.setup.deleteCaches()\napp = require('../../amplify/backend/function/restRoot/src/app')\nawait util.setup.db('unittest_rules')\nawait util.setup.dbData()",
              "err": {
                "message": "Error: Cannot find module 'express'\nRequire stack:\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/amplify/backend/function/restRoot/src/app.js\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/rules.spec.js",
                "estack": "Error: Cannot find module 'express'\nRequire stack:\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/amplify/backend/function/restRoot/src/app.js\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/rules.spec.js\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:902:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:746:27)\n    at Module.require (internal/modules/cjs/loader.js:974:19)\n    at require (internal/modules/cjs/helpers.js:93:18)\n    at Object.<anonymous> (amplify/backend/function/restRoot/src/app.js:8:41)\n    at Module._compile (internal/modules/cjs/loader.js:1085:14)\n    at Module.replacementCompile (node_modules/append-transform/index.js:60:13)\n    at Module._extensions..js (internal/modules/cjs/loader.js:1114:10)\n    at Object.<anonymous> (node_modules/append-transform/index.js:64:4)\n    at Module.load (internal/modules/cjs/loader.js:950:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:790:12)\n    at Module.require (internal/modules/cjs/loader.js:974:19)\n    at require (internal/modules/cjs/helpers.js:93:18)\n    at Context.<anonymous> (test/restRoot/rules.spec.js:33:15)",
                "diff": null
              },
              "uuid": "bb7c7fc0-986f-4a1c-af42-47c158afd600",
              "parentUUID": "6f498c4f-7e73-455f-96bc-6ff04b44d598",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"restRoot rules endpoints\"",
              "fullTitle": "restRoot rules endpoints \"after all\" hook in \"restRoot rules endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await app.server.close()",
              "err": {
                "message": "TypeError: Cannot read property 'server' of undefined",
                "estack": "TypeError: Cannot read property 'server' of undefined\n    at Context.<anonymous> (test/restRoot/rules.spec.js:40:19)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "a5e93dc3-6746-45f2-a064-253f79cdf09e",
              "parentUUID": "6f498c4f-7e73-455f-96bc-6ff04b44d598",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "11ce42ef-f12c-4ce1-b10d-1e6494edbf8d",
              "title": "GET /rules",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/rules.spec.js",
              "file": "/test/restRoot/rules.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to get the rules as an admin",
                  "fullTitle": "restRoot rules endpoints GET /rules should be able to get the rules as an admin",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/rules')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query()\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body[0]).to.have.property('id')\nexpect(res.body[0]).to.have.property('description')\nexpect(res.body[0]).to.have.property('yaml_file')\nexpect(res.body[0]).to.have.property('created')\nexpect(res.body[0]).to.have.property('last_modified')\nexpect(res.body[0]).to.have.property('severity')\nexpect(res.body[0]).to.have.property('category')",
                  "err": {},
                  "uuid": "b90fe366-0b18-4167-9f59-51bb14a7883e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to get the rules as a regular user",
                  "fullTitle": "restRoot rules endpoints GET /rules should not be able to get the rules as a regular user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/rules')\n    .set({ Authorization: `Bearer ${tokens.usr}` })\n    .query()\nexpect(res.status).to.equal(403)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "3659766c-3105-4d86-bd1d-75ca2214d4af",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to get the rules while unauthenticated",
                  "fullTitle": "restRoot rules endpoints GET /rules should not be able to get the rules while unauthenticated",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/v1/rules').query()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "4721611f-7e76-4f0a-adbb-b68ba983ba7f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to get the rules with an invalid jwt",
                  "fullTitle": "restRoot rules endpoints GET /rules should not be able to get the rules with an invalid jwt",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/rules')\n    .set({ Authorization: 'Bearer 123' })\n    .query()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "402da046-e95e-4e32-a6dd-21239b415d05",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b90fe366-0b18-4167-9f59-51bb14a7883e",
                "3659766c-3105-4d86-bd1d-75ca2214d4af",
                "4721611f-7e76-4f0a-adbb-b68ba983ba7f",
                "402da046-e95e-4e32-a6dd-21239b415d05"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a75debb5-82e3-484a-9ae0-7382337e90db",
              "title": "POST /rules",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/rules.spec.js",
              "file": "/test/restRoot/rules.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to post valid rules as an admin",
                  "fullTitle": "restRoot rules endpoints POST /rules should be able to post valid rules as an admin",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cases = await new Promise((resolve, reject) => {\n    glob(\n        path.resolve('test/restRoot/rule_yamls/valid_rules/*'),\n        (err, files) => {\n            if (err) return reject(err)\n            const res = []\n            for (const file of files) {\n                res.push(fs.readFileSync(file).toString())\n            }\n            resolve(res)\n        }\n    )\n})\nfor await (const yaml_file of cases) {\n    const testCase = {\n        description: 'test case rule',\n        yaml_file: yaml_file,\n    }\n    let res = await chai\n        .request(app)\n        .post('/v1/rules')\n        .set({ Authorization: `Bearer ${tokens.adm}` })\n        .send(testCase)\n    expect(res.status).to.equal(201)\n    expect(res.body).to.not.be.empty\n    expect(res.body).to.have.property('id')\n    expect(res.body.id).to.be.a('Number')\n    const id = res.body.id\n    res = await chai\n        .request(app)\n        .get('/v1/rules')\n        .set({ Authorization: `Bearer ${tokens.adm}` })\n        .query()\n    expect(res.status).to.equal(200)\n    expect(res.body).to.not.be.empty\n    let found = false\n    for (const rule of res.body) {\n        if (rule.id === id) {\n            found = true\n            expect(rule.description).to.equal(testCase.description)\n            expect(rule.severity).to.equal(1)\n            expect(rule.category).to.equal('GENERAL')\n            expect(YAML.parse(rule.yaml_file)).to.deep.equal(\n                YAML.parse(testCase.yaml_file)\n            )\n        }\n    }\n    expect(found).to.be.true\n}",
                  "err": {},
                  "uuid": "7b417e85-0f2a-4a6d-8907-44aafd93ddd5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should require the required parameters",
                  "fullTitle": "restRoot rules endpoints POST /rules should require the required parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cases = [\n    {},\n    { description: 'test case rule' },\n    { yaml_file: 'testing: true' },\n]\nfor await (const testCase of cases) {\n    const res = await chai\n        .request(app)\n        .post('/v1/rules')\n        .set({ Authorization: `Bearer ${tokens.adm}` })\n        .send(testCase)\n    expect(res.status).to.equal(400)\n    expect(res.body.error).to.equal('MISSING_PARAMETERS')\n}",
                  "err": {},
                  "uuid": "cae30d6f-7777-4bd8-b729-46ee7d310901",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not accept invalid rules",
                  "fullTitle": "restRoot rules endpoints POST /rules should not accept invalid rules",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cases = await new Promise((resolve, reject) => {\n    glob(\n        path.resolve('test/restRoot/rule_yamls/invalid_rules/*'),\n        (err, files) => {\n            if (err) return reject(err)\n            const res = []\n            for (const file of files) {\n                res.push(fs.readFileSync(file).toString())\n            }\n            resolve(res)\n        }\n    )\n})\nfor await (const testCase of cases) {\n    const res = await chai\n        .request(app)\n        .post('/v1/rules')\n        .set({ Authorization: `Bearer ${tokens.adm}` })\n        .send({\n            description: 'invalid test case x',\n            yaml_file: testCase,\n        })\n    expect(res.status).to.equal(400)\n    expect(res.body.error).to.equal('INVALID_RULE')\n}",
                  "err": {},
                  "uuid": "e0baa0cc-2330-4924-9748-1419534b3af8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to post a rule as a regular user",
                  "fullTitle": "restRoot rules endpoints POST /rules should not be able to post a rule as a regular user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .post('/v1/rules')\n    .set({ Authorization: `Bearer ${tokens.usr}` })\n    .send()\nexpect(res.status).to.equal(403)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "af3c9955-62e8-4a56-91be-1b77ee25e66c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be able to enable a rule as an admin",
                  "fullTitle": "restRoot rules endpoints POST /rules should be able to enable a rule as an admin",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = new Client()\nawait client.connect()\nawait client.query('UPDATE rules SET enabled = false WHERE id = 9')\nconst res = await chai\n    .request(app)\n    .put('/v1/rules/enable/9')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .send()\nexpect(res.status).to.equal(200)\nexpect(res.body).to.be.empty\nconst dbres = await client.query('SELECT * FROM rules WHERE id = 9')\nawait client.end()\nexpect(dbres.rows[0].id).to.equal(9)\nexpect(dbres.rows[0].enabled).to.equal(true)",
                  "err": {},
                  "uuid": "6dc6bead-4075-48e3-bd97-05e868d889a9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be able to disable a rule as an admin",
                  "fullTitle": "restRoot rules endpoints POST /rules should be able to disable a rule as an admin",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const client = new Client()\nawait client.connect()\nawait client.query('UPDATE rules SET enabled = true WHERE id = 3')\nconst res = await chai\n    .request(app)\n    .put('/v1/rules/disable/3')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .send()\nexpect(res.status).to.equal(200)\nexpect(res.body).to.be.empty\nconst dbres = await client.query('SELECT * FROM rules WHERE id = 3')\nawait client.end()\nexpect(dbres.rows[0].id).to.equal(3)\nexpect(dbres.rows[0].enabled).to.equal(false)",
                  "err": {},
                  "uuid": "cd2e5dba-383e-454e-871a-2142a4214e36",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not accept invalid yaml files",
                  "fullTitle": "restRoot rules endpoints POST /rules should not accept invalid yaml files",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const testCase = {\n    description: 'test case rule',\n    // invalid because of indentation\n    yaml_file: ' testing: true\\ntesting2:true',\n}\nconst res = await chai\n    .request(app)\n    .post('/v1/rules')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .send(testCase)\nexpect(res.status).to.equal(400)\nexpect(res.body.error).to.equal('INVALID_YAML')",
                  "err": {},
                  "uuid": "eb62b6b7-cb21-410d-912d-a7241a1e077b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to post a rule while unauthenticated",
                  "fullTitle": "restRoot rules endpoints POST /rules should not be able to post a rule while unauthenticated",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/v1/rules').send()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "0f3def41-12f3-4b4d-80ea-68a23ab32342",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to post a rule with an invalid jwt",
                  "fullTitle": "restRoot rules endpoints POST /rules should not be able to post a rule with an invalid jwt",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .post('/v1/rules')\n    .set({ Authorization: 'Bearer 123' })\n    .send()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "1158b38d-ceb0-479c-94fa-2ee2a2674d42",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to post a rule without a bearer token",
                  "fullTitle": "restRoot rules endpoints POST /rules should not be able to post a rule without a bearer token",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .post('/v1/rules')\n    .set({ Authorization: '123' })\n    .send()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "1a8ed375-03fb-4e86-bf91-4ec15643f888",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "7b417e85-0f2a-4a6d-8907-44aafd93ddd5",
                "cae30d6f-7777-4bd8-b729-46ee7d310901",
                "e0baa0cc-2330-4924-9748-1419534b3af8",
                "af3c9955-62e8-4a56-91be-1b77ee25e66c",
                "6dc6bead-4075-48e3-bd97-05e868d889a9",
                "cd2e5dba-383e-454e-871a-2142a4214e36",
                "eb62b6b7-cb21-410d-912d-a7241a1e077b",
                "0f3def41-12f3-4b4d-80ea-68a23ab32342",
                "1158b38d-ceb0-479c-94fa-2ee2a2674d42",
                "1a8ed375-03fb-4e86-bf91-4ec15643f888"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7c323da-a1d4-4440-8862-f410e8ee5501",
          "title": "restRoot violations endpoints",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/violations.spec.js",
          "file": "/test/restRoot/violations.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"restRoot violations endpoints\"",
              "fullTitle": "restRoot violations endpoints \"before all\" hook in \"restRoot violations endpoints\"",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await util.setup.deleteCaches()\napp = require('../../amplify/backend/function/restRoot/src/app')\nawait util.setup.db('unittest_violations')\nawait util.setup.dbData()",
              "err": {
                "message": "Error: Cannot find module 'express'\nRequire stack:\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/amplify/backend/function/restRoot/src/app.js\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/violations.spec.js",
                "estack": "Error: Cannot find module 'express'\nRequire stack:\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/amplify/backend/function/restRoot/src/app.js\n- /Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/violations.spec.js\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:902:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:746:27)\n    at Module.require (internal/modules/cjs/loader.js:974:19)\n    at require (internal/modules/cjs/helpers.js:93:18)\n    at Object.<anonymous> (amplify/backend/function/restRoot/src/app.js:8:41)\n    at Module._compile (internal/modules/cjs/loader.js:1085:14)\n    at Module.replacementCompile (node_modules/append-transform/index.js:60:13)\n    at Module._extensions..js (internal/modules/cjs/loader.js:1114:10)\n    at Object.<anonymous> (node_modules/append-transform/index.js:64:4)\n    at Module.load (internal/modules/cjs/loader.js:950:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:790:12)\n    at Module.require (internal/modules/cjs/loader.js:974:19)\n    at require (internal/modules/cjs/helpers.js:93:18)\n    at Context.<anonymous> (test/restRoot/violations.spec.js:22:15)",
                "diff": null
              },
              "uuid": "52f0d2e4-fe32-4019-9fff-d2639675052e",
              "parentUUID": "f7c323da-a1d4-4440-8862-f410e8ee5501",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"restRoot violations endpoints\"",
              "fullTitle": "restRoot violations endpoints \"after all\" hook in \"restRoot violations endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await app.server.close()",
              "err": {
                "message": "TypeError: Cannot read property 'server' of undefined",
                "estack": "TypeError: Cannot read property 'server' of undefined\n    at Context.<anonymous> (test/restRoot/violations.spec.js:29:19)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "8bd9a0fc-d693-42df-a6a1-6b9e36ee29c7",
              "parentUUID": "f7c323da-a1d4-4440-8862-f410e8ee5501",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7c0a3570-1e16-49ed-bbfc-faed3a941e29",
              "title": "GET /violations",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/violations.spec.js",
              "file": "/test/restRoot/violations.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to get all violations as an admin",
                  "fullTitle": "restRoot violations endpoints GET /violations should be able to get all violations as an admin",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query()\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.have.length(3)\nutil.expectViolationResult(res.body[0])",
                  "err": {},
                  "uuid": "520758f8-a080-4819-922e-4bedd14c56ee",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to get all violations as a regular user",
                  "fullTitle": "restRoot violations endpoints GET /violations should not be able to get all violations as a regular user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: `Bearer ${tokens.usr}` })\n    .query()\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.have.length(1)\nutil.expectViolationResult(res.body[0])",
                  "err": {},
                  "uuid": "7748a3f4-5aa1-4add-8668-462192bfbd52",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "a user should be able to get their own violations",
                  "fullTitle": "restRoot violations endpoints GET /violations a user should be able to get their own violations",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: `Bearer ${tokens.usr}` })\n    .query()\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.have.length(1)\nexpect(res.body).to.deep.equal([\n    {\n        id: 2,\n        repo_name: 'CPSC-319/TerraScanBackEnd',\n        pull_url:\n            'https://github.com/CPSC-319/TerraScanBackEnd/pull/2',\n        file_path: 'terraform/example.tf',\n        line_number: 10,\n        resource_name: 'example_resource',\n        timestamp_found: '2021-10-14T19:26:16.215Z',\n        timestamp_fixed: null,\n        rule_id: 1,\n        github_username: 'testing2',\n        severity: 0,\n    },\n])",
                  "err": {},
                  "uuid": "417744a4-0ae2-4824-9462-092e18852d34",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be able to get the violations with an invalid jwt",
                  "fullTitle": "restRoot violations endpoints GET /violations should not be able to get the violations with an invalid jwt",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: 'Bearer 123' })\n    .query()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "462170cf-faec-4a2e-8f7c-5ca40a03209a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be possible for an admin to query by github_username",
                  "fullTitle": "restRoot violations endpoints GET /violations should be possible for an admin to query by github_username",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query({ user: 'testing2' })\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.have.length(1)\nexpect(res.body).to.deep.equal([\n    {\n        id: 2,\n        repo_name: 'CPSC-319/TerraScanBackEnd',\n        pull_url:\n            'https://github.com/CPSC-319/TerraScanBackEnd/pull/2',\n        file_path: 'terraform/example.tf',\n        line_number: 10,\n        resource_name: 'example_resource',\n        timestamp_found: '2021-10-14T19:26:16.215Z',\n        timestamp_fixed: null,\n        rule_id: 1,\n        github_username: 'testing2',\n        severity: 0,\n    },\n])",
                  "err": {},
                  "uuid": "072bb4cc-06d0-4bd9-a99a-9b553fc468f7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be possible for an admin to query by repo",
                  "fullTitle": "restRoot violations endpoints GET /violations should be possible for an admin to query by repo",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query({ repo: 'CPSC-319/TerraScanBackEnd' })\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.have.length(2)\nexpect(res.body).to.deep.equal([\n    {\n        id: 1,\n        repo_name: 'CPSC-319/TerraScanBackEnd',\n        pull_url:\n            'https://github.com/CPSC-319/TerraScanBackEnd/pull/1',\n        file_path: 'terraform/example.tf',\n        line_number: 10,\n        resource_name: 'example_resource',\n        timestamp_found: '2021-10-14T19:26:16.215Z',\n        timestamp_fixed: '2021-10-16T21:40:50.675Z',\n        rule_id: 1,\n        github_username: 'testing',\n        severity: 0,\n    },\n    {\n        id: 2,\n        repo_name: 'CPSC-319/TerraScanBackEnd',\n        pull_url:\n            'https://github.com/CPSC-319/TerraScanBackEnd/pull/2',\n        file_path: 'terraform/example.tf',\n        line_number: 10,\n        resource_name: 'example_resource',\n        timestamp_found: '2021-10-14T19:26:16.215Z',\n        timestamp_fixed: null,\n        rule_id: 1,\n        github_username: 'testing2',\n        severity: 0,\n    },\n])",
                  "err": {},
                  "uuid": "f9a33a34-447e-45a3-9dfe-3cad3a2e6a83",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be possible for an admin to query by pull request",
                  "fullTitle": "restRoot violations endpoints GET /violations should be possible for an admin to query by pull request",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query({\n        pull_request:\n            'https://github.com/CPSC-319/TerraScanBackEnd/pull/2',\n    })\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.have.length(1)\nexpect(res.body).to.deep.equal([\n    {\n        id: 2,\n        repo_name: 'CPSC-319/TerraScanBackEnd',\n        pull_url:\n            'https://github.com/CPSC-319/TerraScanBackEnd/pull/2',\n        file_path: 'terraform/example.tf',\n        line_number: 10,\n        resource_name: 'example_resource',\n        timestamp_found: '2021-10-14T19:26:16.215Z',\n        timestamp_fixed: null,\n        rule_id: 1,\n        github_username: 'testing2',\n        severity: 0,\n    },\n])",
                  "err": {},
                  "uuid": "ced3d102-6db9-41ed-9d56-ea69dc2262ad",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should fail for a jwt with no ghb field",
                  "fullTitle": "restRoot violations endpoints GET /violations should fail for a jwt with no ghb field",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations')\n    .set({ Authorization: `Bearer ${tokens.with_no_github}` })\n    .query()\nexpect(res.status).to.equal(400)\nexpect(res.body).to.not.be.empty\nexpect(res.body.error).to.equal('JWT_ERROR')",
                  "err": {},
                  "uuid": "fa424cdd-7d29-4501-87f9-4ecf2100a845",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should deny an unauthenticated user",
                  "fullTitle": "restRoot violations endpoints GET /violations should deny an unauthenticated user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/v1/violations').query()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "4e59864d-59d4-4701-ac0b-61191ba22af8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "520758f8-a080-4819-922e-4bedd14c56ee",
                "7748a3f4-5aa1-4add-8668-462192bfbd52",
                "417744a4-0ae2-4824-9462-092e18852d34",
                "462170cf-faec-4a2e-8f7c-5ca40a03209a",
                "072bb4cc-06d0-4bd9-a99a-9b553fc468f7",
                "f9a33a34-447e-45a3-9dfe-3cad3a2e6a83",
                "ced3d102-6db9-41ed-9d56-ea69dc2262ad",
                "fa424cdd-7d29-4501-87f9-4ecf2100a845",
                "4e59864d-59d4-4701-ac0b-61191ba22af8"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7453e68-e96a-4d27-8a35-ef746aa1004b",
              "title": "GET /violations/aggregated",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/restRoot/violations.spec.js",
              "file": "/test/restRoot/violations.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should deny unauthenticated users",
                  "fullTitle": "restRoot violations endpoints GET /violations/aggregated should deny unauthenticated users",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations/aggregated')\n    .query()\nexpect(res.status).to.equal(401)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "7f6a1ce9-77e0-44a7-96b6-02ffbc06c8e1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should deny non-admin users",
                  "fullTitle": "restRoot violations endpoints GET /violations/aggregated should deny non-admin users",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations/aggregated')\n    .set({ Authorization: `Bearer ${tokens.usr}` })\n    .query()\nexpect(res.status).to.equal(403)\nexpect(res.body).to.be.empty",
                  "err": {},
                  "uuid": "8e046182-c484-428b-bdf8-cac05a54a993",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return a count per repo",
                  "fullTitle": "restRoot violations endpoints GET /violations/aggregated should return a count per repo",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations/aggregated')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query({\n        type: 'count-per-repo',\n    })\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.deep.equal([\n    { repo_name: 'CPSC-319/TerraScanBackEnd', count: '2' },\n    { repo_name: 'CPSC-319/TerraScanFrontEnd', count: '1' },\n])",
                  "err": {},
                  "uuid": "3479fb76-5595-43ec-b187-c2cd60cbff0e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return a top 10 rules violated",
                  "fullTitle": "restRoot violations endpoints GET /violations/aggregated should return a top 10 rules violated",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations/aggregated')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query({\n        type: 'top10',\n    })\nexpect(res.status).to.equal(200)\nexpect(res.body).to.not.be.empty\nexpect(res.body).to.deep.equal([\n    { rule_id: 1, description: 'rule 1', count: '2' },\n    { rule_id: 2, description: 'rule two', count: '1' },\n])",
                  "err": {},
                  "uuid": "bff3828b-80f8-4682-87b0-c6d6e609c980",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should complain about missing parameters",
                  "fullTitle": "restRoot violations endpoints GET /violations/aggregated should complain about missing parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations/aggregated')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query()\nexpect(res.status).to.equal(400)\nexpect(res.body).to.not.be.empty\nexpect(res.body.error).to.equal('MISSING_PARAMETERS')",
                  "err": {},
                  "uuid": "ba3a4b56-a507-4cc7-ad17-3ba76574992f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should complain about invalid parameters",
                  "fullTitle": "restRoot violations endpoints GET /violations/aggregated should complain about invalid parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/v1/violations/aggregated')\n    .set({ Authorization: `Bearer ${tokens.adm}` })\n    .query({type: 'non-existing'})\nexpect(res.status).to.equal(400)\nexpect(res.body).to.not.be.empty\nexpect(res.body.error).to.equal('INVALID_PARAMETERS')",
                  "err": {},
                  "uuid": "bcfe7902-bc58-4533-a357-275d637dc908",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "7f6a1ce9-77e0-44a7-96b6-02ffbc06c8e1",
                "8e046182-c484-428b-bdf8-cac05a54a993",
                "3479fb76-5595-43ec-b187-c2cd60cbff0e",
                "bff3828b-80f8-4682-87b0-c6d6e609c980",
                "ba3a4b56-a507-4cc7-ad17-3ba76574992f",
                "bcfe7902-bc58-4533-a357-275d637dc908"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "214bd69b-2604-4a50-86fc-3c7daa067581",
          "title": "parsing terraform files",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/parsing.spec.js",
          "file": "/test/terraform/parsing.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cf640267-edb1-4471-9663-07de5dcaa32b",
              "title": "parsing hcl to json",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/parsing.spec.js",
              "file": "/test/terraform/parsing.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse resources in main.tf to json",
                  "fullTitle": "parsing terraform files parsing hcl to json should parse resources in main.tf to json",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resources = parser(filepath1)\nexpect(Object.keys(resources)).to.include('aws_ebs_volume')\nexpect(Object.keys(resources)).to.include('aws_volume_attachment')\nexpect(Object.keys(resources).length).to.equal(2)\nexpect(Object.keys(resources.aws_ebs_volume.main).length).to.equal(5)\nexpect(resources.aws_ebs_volume.main.availability_zone).to.equal('${var.az}')\nexpect(resources.aws_ebs_volume.main.type).to.equal('${var.volume_type}')\nexpect(resources.aws_ebs_volume.main.size).to.equal('${var.size}')\nexpect(resources.aws_ebs_volume.main.encrypted).to.equal(true)\nexpect(resources.aws_ebs_volume.main.lifecycle.prevent_destroy).to.equal(true)\nexpect(Object.keys(resources.aws_ebs_volume.main.lifecycle).length).to.equal(1)\nexpect(Object.keys(resources.aws_volume_attachment.main).length).to.equal(5)\nexpect(resources.aws_volume_attachment.main.device_name).to.equal('${var.external_device_name}')\nexpect(resources.aws_volume_attachment.main.volume_id).to.equal('${aws_ebs_volume.main.id}')\nexpect(resources.aws_volume_attachment.main.instance_id).to.equal('${var.instance_id}')\nexpect(resources.aws_volume_attachment.main.skip_destroy).to.equal(true)\nexpect(resources.aws_volume_attachment.main.provisioner.length).to.equal(3)\nexpect(resources.aws_volume_attachment.main.provisioner[0]).to.have.all.keys('file')\nexpect(resources.aws_volume_attachment.main.provisioner[0].file.source).to.equal('${path.module}/files/attach-data-volume.sh')\nexpect(resources.aws_volume_attachment.main.provisioner[0].file.destination).to.equal('${local.script_dest}')\nexpect(Object.keys(resources.aws_volume_attachment.main.provisioner[0].file).length).to.equal(2)\nexpect(resources.aws_volume_attachment.main.provisioner[1]).to.have.all.keys('remote-exec')\nexpect(resources.aws_volume_attachment.main.provisioner[1]['remote-exec'].inline[0]).to.equal('chmod +x ${local.script_dest}')\nexpect(resources.aws_volume_attachment.main.provisioner[1]['remote-exec'].inline.length).to.equal(1)\nexpect(Object.keys(resources.aws_volume_attachment.main.provisioner[1]['remote-exec']).length).to.equal(1)\nexpect(resources.aws_volume_attachment.main.provisioner[2]).to.have.all.keys('remote-exec')\nexpect(resources.aws_volume_attachment.main.provisioner[2]['remote-exec'].tags.Environment).to.equal('${var.environment}')\nexpect(Object.keys(resources.aws_volume_attachment.main.provisioner[2]['remote-exec']).length).to.equal(1)\nexpect(Object.keys(resources.aws_volume_attachment.main.provisioner[2]['remote-exec'].tags).length).to.equal(1)",
                  "err": {},
                  "uuid": "335d2626-b4f3-4bc8-ba98-49a73bc9140b",
                  "parentUUID": "cf640267-edb1-4471-9663-07de5dcaa32b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "335d2626-b4f3-4bc8-ba98-49a73bc9140b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47037706-0a8c-4225-a7e0-09f4e12bec82",
              "title": "should get the right line numbers",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/parsing.spec.js",
              "file": "/test/terraform/parsing.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return line number of resource: aws_volume_attachment main, from main.tf",
                  "fullTitle": "parsing terraform files should get the right line numbers should return line number of resource: aws_volume_attachment main, from main.tf",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return getLineNumber(filepath1, 'aws_volume_attachment', 'main').then((lineNum) => {\n    expect(lineNum).to.equal(20)\n}).catch((err) => {\n    expect.fail(err.message)\n})",
                  "err": {},
                  "uuid": "ad682071-467c-4ec6-8a31-da6c867846e7",
                  "parentUUID": "47037706-0a8c-4225-a7e0-09f4e12bec82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return line number of resource: aws_transfer_server test",
                  "fullTitle": "parsing terraform files should get the right line numbers should return line number of resource: aws_transfer_server test",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const filepath5 = __dirname + '/tfFiles/Networking/ensure-transfer-server-is-not-exposed-publicly.test.wrong-value.tf'\nreturn getLineNumber(filepath5, 'aws_transfer_server', 'test').then((lineNum) => {\n    expect(lineNum).to.equal(1)\n}).catch((err) => {\n    expect.fail(err.message)\n})",
                  "err": {},
                  "uuid": "ef4287f4-c8c5-42fa-aae8-30a1dfb5021c",
                  "parentUUID": "47037706-0a8c-4225-a7e0-09f4e12bec82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return line number of resource: aws_s3_bucket_object m3-data2-service-file, from m3-data2.tf",
                  "fullTitle": "parsing terraform files should get the right line numbers should return line number of resource: aws_s3_bucket_object m3-data2-service-file, from m3-data2.tf",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return getLineNumber(filepath2, 'aws_s3_bucket_object', 'm3-data2-service-file').then((lineNum) => {\n    expect(lineNum).to.equal(70)\n}).catch((err) => {\n    expect.fail(err.message)\n})",
                  "err": {},
                  "uuid": "e3da26ee-91e6-4cd1-a472-212b1aa119ef",
                  "parentUUID": "47037706-0a8c-4225-a7e0-09f4e12bec82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return line number of resource: aws_eip kali, from kali_ec2.tf",
                  "fullTitle": "parsing terraform files should get the right line numbers should return line number of resource: aws_eip kali, from kali_ec2.tf",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return getLineNumber(filepath3, 'aws_eip', 'kali').then((lineNum) => {\n    expect(lineNum).to.equal(48)\n}).catch((err) => {\n    expect.fail(err.message)\n})",
                  "err": {},
                  "uuid": "ecd2db06-d7c2-43fe-895e-b266e01d7019",
                  "parentUUID": "47037706-0a8c-4225-a7e0-09f4e12bec82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return line number of resource: aws_ebs_volume main, from main.tf",
                  "fullTitle": "parsing terraform files should get the right line numbers should return line number of resource: aws_ebs_volume main, from main.tf",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return getLineNumber(filepath1, 'aws_ebs_volume', 'main').then((lineNum) => {\n    expect(lineNum).to.equal(1)\n}).catch((err) => {\n    expect.fail(err.message)\n})",
                  "err": {},
                  "uuid": "8765c063-1ea7-46b9-af39-a94dc22bc8bb",
                  "parentUUID": "47037706-0a8c-4225-a7e0-09f4e12bec82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return line number of resource: aws_ebs_volume this, from AWSmain.tf",
                  "fullTitle": "parsing terraform files should get the right line numbers should return line number of resource: aws_ebs_volume this, from AWSmain.tf",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return getLineNumber(filepath4, 'aws_ebs_volume', 'this').then((lineNum) => {\n    expect(lineNum).to.equal(84)\n}).catch((err) => {\n    expect.fail(err.message)\n})",
                  "err": {},
                  "uuid": "3bd7d3c4-518c-4405-bdab-4e2d1f67d506",
                  "parentUUID": "47037706-0a8c-4225-a7e0-09f4e12bec82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad682071-467c-4ec6-8a31-da6c867846e7",
                "ef4287f4-c8c5-42fa-aae8-30a1dfb5021c",
                "e3da26ee-91e6-4cd1-a472-212b1aa119ef",
                "ecd2db06-d7c2-43fe-895e-b266e01d7019",
                "8765c063-1ea7-46b9-af39-a94dc22bc8bb",
                "3bd7d3c4-518c-4405-bdab-4e2d1f67d506"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f0ab8d3-8b7c-4f46-bc61-7d6d302659c3",
          "title": "validating the rules",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
          "file": "/test/terraform/validating.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"validating the rules\"",
              "fullTitle": "validating the rules \"before each\" hook in \"validating the rules\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (fs.existsSync(tempDir)) {\n    deleteDir(tempDir)\n}\nfs.mkdirSync(tempDir)",
              "err": {},
              "uuid": "4d7264c8-4a30-4065-acc0-697296fa0f65",
              "parentUUID": "9f0ab8d3-8b7c-4f46-bc61-7d6d302659c3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"validating the rules\"",
              "fullTitle": "validating the rules \"after all\" hook in \"validating the rules\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (fs.existsSync(tempDir)) {\n    deleteDir(tempDir)\n}",
              "err": {},
              "uuid": "9194d07e-7077-46ca-b7aa-17731280945d",
              "parentUUID": "9f0ab8d3-8b7c-4f46-bc61-7d6d302659c3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a8c435c2-938a-4074-ad60-bded55de0d6f",
              "title": "NETWORKING",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
              "file": "/test/terraform/validating.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not fail bc all keys are true",
                  "fullTitle": "validating the rules NETWORKING should not fail bc all keys are true",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const filepath =\n    __dirname + '/tfFiles/testTFFiles/testingmultiplehas_not1.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/testRules/hasNotMultiple3.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                  "err": {},
                  "uuid": "46f648b4-1d0d-436c-b308-919877f67382",
                  "parentUUID": "a8c435c2-938a-4074-ad60-bded55de0d6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "1a8b6370-1f35-47c1-8427-6b28799d3e95",
                  "title": "Rule: ensure-transfer-server-is-not-exposed-publicly",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should pass as transfer server is exposed publicly",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-transfer-server-is-not-exposed-publicly should pass as transfer server is exposed publicly",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath = __dirname + '/tfFiles/Networking/ensure-transfer-server-is-exposed-publicly.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Networking/ensure-transfer-server-is-not-exposed-publicly.yaml.json'\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        const resultString = fs.readFileSync(EFSfilepath, { encoding: 'utf-8'})\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "c9aa4c69-bb30-485a-9bf6-be474e851ffe",
                      "parentUUID": "1a8b6370-1f35-47c1-8427-6b28799d3e95",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as transfer server is not exposed publicly as endpoint_type does not exist",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-transfer-server-is-not-exposed-publicly should fail as transfer server is not exposed publicly as endpoint_type does not exist",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/ensure-transfer-server-is-not-exposed-publicly.test.none.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/ensure-transfer-server-is-not-exposed-publicly.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(10)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_transfer_server'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "d75c99e3-6957-4232-9f2e-61b96968350f",
                      "parentUUID": "1a8b6370-1f35-47c1-8427-6b28799d3e95",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as transfer server is not exposed publicly as endpoint_type has wrong value",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-transfer-server-is-not-exposed-publicly should fail as transfer server is not exposed publicly as endpoint_type has wrong value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/ensure-transfer-server-is-not-exposed-publicly.test.wrong-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/ensure-transfer-server-is-not-exposed-publicly.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(1)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_transfer_server'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "32bbc045-5cfb-46bb-be34-400dc225a9b9",
                      "parentUUID": "1a8b6370-1f35-47c1-8427-6b28799d3e95",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c9aa4c69-bb30-485a-9bf6-be474e851ffe",
                    "d75c99e3-6957-4232-9f2e-61b96968350f",
                    "32bbc045-5cfb-46bb-be34-400dc225a9b9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0893139d-ca2e-4ff5-9118-78c1719cca59",
                  "title": "Rule: ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key enable_cross_zone_load_balancing has wrong value in resource: aws_lb",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled should fail as key enable_cross_zone_load_balancing has wrong value in resource: aws_lb",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(5)\n        expect(result[0].resource_name).to.deep.equal('aws_lb')\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "1ff53c36-f36e-44a6-aa62-a69ec68f87c8",
                      "parentUUID": "0893139d-ca2e-4ff5-9118-78c1719cca59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key enable_cross_zone_load_balancing is true in resource: aws_lb",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled should pass as key enable_cross_zone_load_balancing is true in resource: aws_lb",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled-correct.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "68e4ae9c-9c64-44b1-b3b7-52883af9fb05",
                      "parentUUID": "0893139d-ca2e-4ff5-9118-78c1719cca59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail bc all of them are in the resource",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled should fail bc all of them are in the resource",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/testTFFiles/testingmultiplehas_not1.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/testRules/hasNotMultiple1.json',\n]\n\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(1)\n        expect(result[0].resource_name).to.deep.equal('aws_codebuild_project')\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "c2e056b1-1dd0-4ebd-886e-c4c1f66cf66c",
                      "parentUUID": "0893139d-ca2e-4ff5-9118-78c1719cca59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as key enable_cross_zone_load_balancing does not exist in resource: aws_lb",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled should fail as key enable_cross_zone_load_balancing does not exist in resource: aws_lb",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Note: default value for key 'enable_cross_zone_load_balancing' is false\nconst filepath =\n    __dirname +\n    '/tfFiles/Networking/ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled-none.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(1)\n        expect(result[0].resource_name).to.deep.equal('aws_lb')\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "8e4933e6-842f-46aa-9dea-0b0ef5338c13",
                      "parentUUID": "0893139d-ca2e-4ff5-9118-78c1719cca59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as at least one of them is false",
                      "fullTitle": "validating the rules NETWORKING Rule: ensure-that-load-balancer-networkgateway-has-cross-zone-load-balancing-enabled should fail as at least one of them is false",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/testTFFiles/testingmultiplehas_not1.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/testRules/hasNotMultiple2.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(1)\n        expect(result[0].resource_name).to.deep.equal('aws_codebuild_project')\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "fe59d45a-dd46-40cf-ba46-8d88e4f927ee",
                      "parentUUID": "0893139d-ca2e-4ff5-9118-78c1719cca59",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1ff53c36-f36e-44a6-aa62-a69ec68f87c8",
                    "68e4ae9c-9c64-44b1-b3b7-52883af9fb05",
                    "c2e056b1-1dd0-4ebd-886e-c4c1f66cf66c",
                    "8e4933e6-842f-46aa-9dea-0b0ef5338c13",
                    "fe59d45a-dd46-40cf-ba46-8d88e4f927ee"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a9348995-56fc-46eb-9a01-e6afb8a9f103",
                  "title": "Rule: networking_1-port-security",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key cidr_blocks has wrong value in resource: aws_security_group",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_1-port-security should fail as key cidr_blocks has wrong value in resource: aws_security_group",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/networking_1-port-security.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_1-port-security.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(3)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_security_group'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "49d00ea5-963a-41f0-aa25-e2989f9e22e3",
                      "parentUUID": "a9348995-56fc-46eb-9a01-e6afb8a9f103",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key cidr_blocks has valid value in resource: aws_security_group",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_1-port-security should pass as key cidr_blocks has valid value in resource: aws_security_group",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/networking_1-port-security-valid-value.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_1-port-security.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "87d7ae68-994a-46ed-ac43-c2d2d18d53bd",
                      "parentUUID": "a9348995-56fc-46eb-9a01-e6afb8a9f103",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key cidr_blocks does not exist in resource: aws_security_group",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_1-port-security should pass as key cidr_blocks does not exist in resource: aws_security_group",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/networking_1-port-security-none.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_1-port-security.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "8cb2b64b-df02-44ca-9aa4-3ddcd920a373",
                      "parentUUID": "a9348995-56fc-46eb-9a01-e6afb8a9f103",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "49d00ea5-963a-41f0-aa25-e2989f9e22e3",
                    "87d7ae68-994a-46ed-ac43-c2d2d18d53bd",
                    "8cb2b64b-df02-44ca-9aa4-3ddcd920a373"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7e270f1a-b8e4-4466-8761-37d94314d8fb",
                  "title": "Rule: networking_31",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as description key does not exist in object ingress in resource: aws_security_group",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_31 should fail as description key does not exist in object ingress in resource: aws_security_group",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/Networking/networking_31.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_31.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(6)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_security_group'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "dde438d2-9f73-4e55-a4f8-4f18bf707fdd",
                      "parentUUID": "7e270f1a-b8e4-4466-8761-37d94314d8fb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as description key exists in object ingress in resource: aws_security_group",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_31 should pass as description key exists in object ingress in resource: aws_security_group",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/networking_31-has-key.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_31.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "e7666ec5-e619-4374-8ebd-70e356bab4ca",
                      "parentUUID": "7e270f1a-b8e4-4466-8761-37d94314d8fb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dde438d2-9f73-4e55-a4f8-4f18bf707fdd",
                    "e7666ec5-e619-4374-8ebd-70e356bab4ca"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0cdf81a0-6ea8-4510-af53-75d08c413c8b",
                  "title": "Rule: networking_32",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as default_cache_behavior.viewer_protocol_policy key has wrong value",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_32 should fail as default_cache_behavior.viewer_protocol_policy key has wrong value",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/Networking/networking_32.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_32.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(4)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_cloudfront_distribution'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "7c18d3d3-8d07-4be3-8d85-17d412ce036e",
                      "parentUUID": "0cdf81a0-6ea8-4510-af53-75d08c413c8b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as default_cache_behavior.viewer_protocol_policy key has a valid value (1)",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_32 should pass as default_cache_behavior.viewer_protocol_policy key has a valid value (1)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/networking_32-correct1.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_32.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "e86dcf90-cbb5-415e-bbb0-acdc1ebc7bea",
                      "parentUUID": "0cdf81a0-6ea8-4510-af53-75d08c413c8b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as default_cache_behavior.viewer_protocol_policy key has a valid value (2)",
                      "fullTitle": "validating the rules NETWORKING Rule: networking_32 should pass as default_cache_behavior.viewer_protocol_policy key has a valid value (2)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Networking/networking_32-correct2.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Networking/networking_32.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "ef2ba3a2-b1dc-4647-8bce-b346f1767470",
                      "parentUUID": "0cdf81a0-6ea8-4510-af53-75d08c413c8b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7c18d3d3-8d07-4be3-8d85-17d412ce036e",
                    "e86dcf90-cbb5-415e-bbb0-acdc1ebc7bea",
                    "ef2ba3a2-b1dc-4647-8bce-b346f1767470"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "46f648b4-1d0d-436c-b308-919877f67382"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4c1f375-ed43-45bf-9e82-e85084d7b688",
              "title": "STORAGE",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
              "file": "/test/terraform/validating.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1e34480f-c586-4dbc-841b-1fa78fbd2b2b",
                  "title": "Rule: bc_aws_s3_20",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key block_public_policy does not exist",
                      "fullTitle": "validating the rules STORAGE Rule: bc_aws_s3_20 should fail as key block_public_policy does not exist",
                      "timedOut": false,
                      "duration": 3,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/STORAGE/bc_aws_s3_20.test.none.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Storage/bc_aws_s3_20.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(2)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_s3_bucket_public_access_block'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {
                        "message": "AssertionError: expected 2 to deeply equal 1",
                        "estack": "AssertionError: expected 2 to deeply equal 1\n    at /Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js:721:32\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                        "diff": null
                      },
                      "uuid": "0d5d08e4-1552-4ede-975f-71ccbf53caf8",
                      "parentUUID": "1e34480f-c586-4dbc-841b-1fa78fbd2b2b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as key block_public_policy has wrong value",
                      "fullTitle": "validating the rules STORAGE Rule: bc_aws_s3_20 should fail as key block_public_policy has wrong value",
                      "timedOut": false,
                      "duration": 3,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/bc_aws_s3_20.test.wrong-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Storage/bc_aws_s3_20.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(1)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_s3_bucket_public_access_block'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {
                        "message": "AssertionError: expected 2 to deeply equal 1",
                        "estack": "AssertionError: expected 2 to deeply equal 1\n    at /Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js:761:32\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                        "diff": null
                      },
                      "uuid": "accd51c4-593e-49d2-a5e8-afc20d26cc66",
                      "parentUUID": "1e34480f-c586-4dbc-841b-1fa78fbd2b2b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key block_public_policy has correct value",
                      "fullTitle": "validating the rules STORAGE Rule: bc_aws_s3_20 should pass as key block_public_policy has correct value",
                      "timedOut": false,
                      "duration": 4,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/bc_aws_s3_20.test.correct-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Storage/bc_aws_s3_20.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {
                        "message": "AssertionError: expected 'VIOLATION' to deeply equal 'NOVIOLATION'",
                        "estack": "AssertionError: expected 'VIOLATION' to deeply equal 'NOVIOLATION'\n    at /Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js:792:32\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                        "diff": null
                      },
                      "uuid": "35a4e331-b40d-45e7-be88-47c00acc354d",
                      "parentUUID": "1e34480f-c586-4dbc-841b-1fa78fbd2b2b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "0d5d08e4-1552-4ede-975f-71ccbf53caf8",
                    "accd51c4-593e-49d2-a5e8-afc20d26cc66",
                    "35a4e331-b40d-45e7-be88-47c00acc354d"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 10,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f2d726d3-240e-46b0-bb1b-074270f75875",
                  "title": "Rule: ensure-docdb-has-audit-logs-enabled",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key parameter does not exist",
                      "fullTitle": "validating the rules STORAGE Rule: ensure-docdb-has-audit-logs-enabled should fail as key parameter does not exist",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/ensure-docdb-has-audit-logs-enabled.test.none.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/ensure-docdb-has-audit-logs-enabled.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(3)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_docdb_cluster_parameter_group'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "0d02e7bf-75c6-4938-a8d1-151415dc0a9d",
                      "parentUUID": "f2d726d3-240e-46b0-bb1b-074270f75875",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as key audit_logs has wrong value",
                      "fullTitle": "validating the rules STORAGE Rule: ensure-docdb-has-audit-logs-enabled should fail as key audit_logs has wrong value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/ensure-docdb-has-audit-logs-enabled.test.wrong-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/ensure-docdb-has-audit-logs-enabled.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(2)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_docdb_cluster_parameter_group'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "43da65f0-6344-4729-b90f-590591721068",
                      "parentUUID": "f2d726d3-240e-46b0-bb1b-074270f75875",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key audit_logs has correct value",
                      "fullTitle": "validating the rules STORAGE Rule: ensure-docdb-has-audit-logs-enabled should pass as key audit_logs has correct value",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/ensure-docdb-has-audit-logs-enabled.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/ensure-docdb-has-audit-logs-enabled.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "2c297449-1bb6-4b48-acdf-f0a91b83d47f",
                      "parentUUID": "f2d726d3-240e-46b0-bb1b-074270f75875",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as key audit_logs has wrong value for both",
                      "fullTitle": "validating the rules STORAGE Rule: ensure-docdb-has-audit-logs-enabled should fail as key audit_logs has wrong value for both",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/ensure-docdb-has-audit-logs-enabled.test.wrong-value2.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/ensure-docdb-has-audit-logs-enabled.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(4)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_docdb_cluster_parameter_group'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "89e7408b-5bb5-45fa-86e5-bd1407b18fbc",
                      "parentUUID": "f2d726d3-240e-46b0-bb1b-074270f75875",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0d02e7bf-75c6-4938-a8d1-151415dc0a9d",
                    "43da65f0-6344-4729-b90f-590591721068",
                    "2c297449-1bb6-4b48-acdf-f0a91b83d47f",
                    "89e7408b-5bb5-45fa-86e5-bd1407b18fbc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e3867914-f694-435e-a2e6-9517a1c7ebd7",
                  "title": "Rule: s3_13-enable-logging",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key logging does not exist",
                      "fullTitle": "validating the rules STORAGE Rule: s3_13-enable-logging should fail as key logging does not exist",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/STORAGE/s3_13-enable-logging.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/s3_13-enable-logging.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(2)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_s3_bucket'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "5be94369-bed2-4470-af24-7a21a439cf46",
                      "parentUUID": "e3867914-f694-435e-a2e6-9517a1c7ebd7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key logging exists",
                      "fullTitle": "validating the rules STORAGE Rule: s3_13-enable-logging should pass as key logging exists",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/s3_13-enable-logging-correct.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/s3_13-enable-logging.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "b330df19-1241-4bfa-96b3-850d1d950768",
                      "parentUUID": "e3867914-f694-435e-a2e6-9517a1c7ebd7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5be94369-bed2-4470-af24-7a21a439cf46",
                    "b330df19-1241-4bfa-96b3-850d1d950768"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c54fbd29-e7b1-49ce-b106-a68a3bc46d7f",
                  "title": "Rule: s3_7-acl-write-permissions-aws",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should pass as key acl does not exist",
                      "fullTitle": "validating the rules STORAGE Rule: s3_7-acl-write-permissions-aws should pass as key acl does not exist",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/s3_7-acl-write-permissions-aws-none.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/s3_7-acl-write-permissions-aws.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "25690bbd-9e7d-421a-b9dd-0baff97043b4",
                      "parentUUID": "c54fbd29-e7b1-49ce-b106-a68a3bc46d7f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key has valid value",
                      "fullTitle": "validating the rules STORAGE Rule: s3_7-acl-write-permissions-aws should pass as key has valid value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/s3_7-acl-write-permissions-aws-valid-value.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/s3_7-acl-write-permissions-aws.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "3a53f72d-444e-4373-8f69-f619939dc4a8",
                      "parentUUID": "c54fbd29-e7b1-49ce-b106-a68a3bc46d7f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as key acl has value public-write",
                      "fullTitle": "validating the rules STORAGE Rule: s3_7-acl-write-permissions-aws should fail as key acl has value public-write",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/STORAGE/s3_7-acl-write-permissions-aws.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Storage/s3_7-acl-write-permissions-aws.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(3)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_s3_bucket'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "a582193c-ec62-42b3-98ce-906ba301fb34",
                      "parentUUID": "c54fbd29-e7b1-49ce-b106-a68a3bc46d7f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "25690bbd-9e7d-421a-b9dd-0baff97043b4",
                    "3a53f72d-444e-4373-8f69-f619939dc4a8",
                    "a582193c-ec62-42b3-98ce-906ba301fb34"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "342f229f-14ba-48fc-933a-60b7a22c6d85",
              "title": "LOGGING",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
              "file": "/test/terraform/validating.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "dcfdce0e-71ca-4aa0-8fe2-38d22e574d15",
                  "title": "Rule: bc_aws_logging_24",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key access_logs.enabled has wrong value",
                      "fullTitle": "validating the rules LOGGING Rule: bc_aws_logging_24 should fail as key access_logs.enabled has wrong value",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Logging/bc_aws_logging_24.test.wrong-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Logging/bc_aws_logging_24.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(2)\n        expect(result[0].resource_name).to.deep.equal('aws_elb')\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "a57d4741-a9c6-48a3-8ff9-4396e517e0f9",
                      "parentUUID": "dcfdce0e-71ca-4aa0-8fe2-38d22e574d15",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key access_logs.enabled has correct value",
                      "fullTitle": "validating the rules LOGGING Rule: bc_aws_logging_24 should pass as key access_logs.enabled has correct value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Logging/bc_aws_logging_24.test.correct-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Logging/bc_aws_logging_24.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "345d89c9-d907-473a-b6e5-91cad0c4642e",
                      "parentUUID": "dcfdce0e-71ca-4aa0-8fe2-38d22e574d15",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key access_logs.enabled does not exist",
                      "fullTitle": "validating the rules LOGGING Rule: bc_aws_logging_24 should pass as key access_logs.enabled does not exist",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Note: default value of access_logs.enables is true\nconst filepath =\n    __dirname +\n    '/tfFiles/Logging/bc_aws_logging_24.test.none.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/Logging/bc_aws_logging_24.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(3)\n        expect(result[0].resource_name).to.deep.equal('aws_elb')\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "5ad86fe1-6cb4-4493-b9ed-f267238d02d6",
                      "parentUUID": "dcfdce0e-71ca-4aa0-8fe2-38d22e574d15",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a57d4741-a9c6-48a3-8ff9-4396e517e0f9",
                    "345d89c9-d907-473a-b6e5-91cad0c4642e",
                    "5ad86fe1-6cb4-4493-b9ed-f267238d02d6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56b06009-5fd7-4452-bdec-67d839e56a87",
              "title": "GENERAL",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
              "file": "/test/terraform/validating.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "093f21ae-b981-466e-b0dc-000e22fa6b87",
                  "title": "Rule: ensure-that-athena-workgroup-is-encrypted",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key configuration.result_configuration.encryption_configuration does not exists",
                      "fullTitle": "validating the rules GENERAL Rule: ensure-that-athena-workgroup-is-encrypted should fail as key configuration.result_configuration.encryption_configuration does not exists",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/General/ensure-that-athena-workgroup-is-encrypted.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/General/ensure-that-athena-workgroup-is-encrypted.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(3)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_athena_workgroup'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "1703e0b1-56d4-4762-a868-ea9785465747",
                      "parentUUID": "093f21ae-b981-466e-b0dc-000e22fa6b87",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key configuration.result_configuration.encryption_configuration exists",
                      "fullTitle": "validating the rules GENERAL Rule: ensure-that-athena-workgroup-is-encrypted should pass as key configuration.result_configuration.encryption_configuration exists",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/General/ensure-that-athena-workgroup-is-encrypted-correct.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/General/ensure-that-athena-workgroup-is-encrypted.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "35ff9cd3-0a6e-49ef-afc6-a9017246bfe1",
                      "parentUUID": "093f21ae-b981-466e-b0dc-000e22fa6b87",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1703e0b1-56d4-4762-a868-ea9785465747",
                    "35ff9cd3-0a6e-49ef-afc6-a9017246bfe1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f0a7f61e-a16c-412a-ba82-7832c862dca4",
                  "title": "Rule: ensure-that-codebuild-projects-are-encrypted",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key encryption_key does not exists",
                      "fullTitle": "validating the rules GENERAL Rule: ensure-that-codebuild-projects-are-encrypted should fail as key encryption_key does not exists",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/General/ensure-that-codebuild-projects-are-encrypted.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/General/ensure-that-codebuild-projects-are-encrypted.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(10)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_codebuild_project'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "3617cd13-95b0-4ec4-afe1-565d4cb36a0b",
                      "parentUUID": "f0a7f61e-a16c-412a-ba82-7832c862dca4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key encryption_key exists",
                      "fullTitle": "validating the rules GENERAL Rule: ensure-that-codebuild-projects-are-encrypted should pass as key encryption_key exists",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/General/ensure-that-codebuild-projects-are-encrypted-correct.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/General/ensure-that-codebuild-projects-are-encrypted.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "0f9a6aef-82f7-4582-8d19-b3f434b0c1a6",
                      "parentUUID": "f0a7f61e-a16c-412a-ba82-7832c862dca4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "testing multiple resources - 2 violations",
                      "fullTitle": "validating the rules GENERAL Rule: ensure-that-codebuild-projects-are-encrypted testing multiple resources - 2 violations",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/General/multipleResources-twoViols.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname +\n    '/json_rules/General/ensure-that-codebuild-projects-are-encrypted.yaml.json',\n    __dirname +\n    '/json_rules/General/ensure-that-athena-workgroup-is-encrypted.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(2)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(1)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_athena_workgroup'\n        )\n        expect(result[1].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[1].file_path).to.deep.equal(filepath)\n        expect(result[1].line_number).to.deep.equal(9)\n        expect(result[1].resource_name).to.deep.equal(\n            'aws_codebuild_project'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "703fbb42-af30-47e0-87cc-114b6cb9fa88",
                      "parentUUID": "f0a7f61e-a16c-412a-ba82-7832c862dca4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3617cd13-95b0-4ec4-afe1-565d4cb36a0b",
                    "0f9a6aef-82f7-4582-8d19-b3f434b0c1a6",
                    "703fbb42-af30-47e0-87cc-114b6cb9fa88"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e89c0739-4fb9-49a1-9634-99e3139125d2",
              "title": "PUBLIC",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
              "file": "/test/terraform/validating.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0b7f6caa-8d2f-4f66-803e-9c3aadb5365c",
                  "title": "Rule: public_11",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key publicly_accessible does not exists",
                      "fullTitle": "validating the rules PUBLIC Rule: public_11 should fail as key publicly_accessible does not exists",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/Public/public_11.test.none.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Public/public_11.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(2)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_mq_broker'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "c49c57a0-53fb-4b7e-9734-9d9a7109683f",
                      "parentUUID": "0b7f6caa-8d2f-4f66-803e-9c3aadb5365c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail as key publicly_accessible has wrong value",
                      "fullTitle": "validating the rules PUBLIC Rule: public_11 should fail as key publicly_accessible has wrong value",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/Public/public_11.test.wrong-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Public/public_11.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(14)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_mq_broker'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "ec322f16-d26b-47e4-86eb-c0a42f94a5d0",
                      "parentUUID": "0b7f6caa-8d2f-4f66-803e-9c3aadb5365c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key encryption_key exists with value true",
                      "fullTitle": "validating the rules PUBLIC Rule: public_11 should pass as key encryption_key exists with value true",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname +\n    '/tfFiles/Public/public_11.test.correct-value.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Public/public_11.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "671fbf76-b887-4274-9bb0-e2b2787573bb",
                      "parentUUID": "0b7f6caa-8d2f-4f66-803e-9c3aadb5365c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c49c57a0-53fb-4b7e-9734-9d9a7109683f",
                    "ec322f16-d26b-47e4-86eb-c0a42f94a5d0",
                    "671fbf76-b887-4274-9bb0-e2b2787573bb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6872e00a-020e-4bc8-b6a5-5a6af0eb8a5d",
              "title": "SECRETS",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
              "file": "/test/terraform/validating.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "5e754a17-0b35-49f5-9952-e23466fef03c",
                  "title": "Rule: bc_aws_secrets",
                  "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/terraform/validating.spec.js",
                  "file": "/test/terraform/validating.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail as key user_data exists",
                      "fullTitle": "validating the rules SECRETS Rule: bc_aws_secrets should fail as key user_data exists",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/Secrets/bc_aws_secrets.test.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Secrets/bc_aws_secrets.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('VIOLATION')\n        expect(result.length).to.deep.equal(1)\n        expect(result[0].repo_name).to.deep.equal(\n            'TerraScanTestData'\n        )\n        expect(result[0].file_path).to.deep.equal(filepath)\n        expect(result[0].line_number).to.deep.equal(4)\n        expect(result[0].resource_name).to.deep.equal(\n            'aws_instance'\n        )\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "a6c51744-2541-47cd-ae41-21131999ed9a",
                      "parentUUID": "5e754a17-0b35-49f5-9952-e23466fef03c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should pass as key user_data does not exists",
                      "fullTitle": "validating the rules SECRETS Rule: bc_aws_secrets should pass as key user_data does not exists",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filepath =\n    __dirname + '/tfFiles/Secrets/bc_aws_secrets.test.none.tf'\nconst EFSfilepath = filepath + '-result.json'\nconst filepathsToRules = [\n    __dirname + '/json_rules/Secrets/bc_aws_secrets.yaml.json',\n]\naddFilesInTempDir(filepathsToRules)\nevent.filePath = filepath\nevent.fileName = getFileName(filepath)\nreturn agentLambda(event)\n    .then((ret) => {\n        // Verify the rule id when an id is created\n        const resultString = fs.readFileSync(EFSfilepath, {\n            encoding: 'utf-8',\n        })\n        const json = JSON.parse(resultString)\n        const result = json.results\n        const status = json.status\n        expect(ret).to.deep.equal(true)\n        expect(status).to.deep.equal('NOVIOLATION')\n        expect(result.length).to.deep.equal(0)\n        deleteFile(EFSfilepath)\n    })\n    .catch((err) => {\n        deleteFile(EFSfilepath)\n        expect.fail(err.message)\n    })",
                      "err": {},
                      "uuid": "4c1a1939-dc83-4a09-92f5-bd2ab48530d3",
                      "parentUUID": "5e754a17-0b35-49f5-9952-e23466fef03c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a6c51744-2541-47cd-ae41-21131999ed9a",
                    "4c1a1939-dc83-4a09-92f5-bd2ab48530d3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "140d2cfa-7472-4b70-a836-899ab4c37a23",
          "title": "webhook git",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/webhook/git.spec.js",
          "file": "/test/webhook/git.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a1a72d77-12c2-4322-9232-5da46a1bdadc",
              "title": "gitClone",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/webhook/git.spec.js",
              "file": "/test/webhook/git.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should thrown error for missing parameter",
                  "fullTitle": "webhook git gitClone should thrown error for missing parameter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await gitClone()\n} catch (error) {\n    expect(error.message).to.equal('gitClone: Missing Parameters')\n}",
                  "err": {},
                  "uuid": "ae79362b-4f29-4cdb-a067-f638f5ceeada",
                  "parentUUID": "a1a72d77-12c2-4322-9232-5da46a1bdadc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should execute even when ghPersonalAccessToken is omitted",
                  "fullTitle": "webhook git gitClone should execute even when ghPersonalAccessToken is omitted",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const spy1 = chai.spy.on(fs, 'existsSync', () => false)\nconst spy2 = chai.spy.on(fs, 'mkdirSync')\nconst spy3 = chai.spy.on(shHelper, 'exec', () => Promise.resolve())\ntry {\n    await gitClone(\n        cloneURL,\n        repoName,\n        branchName,\n        pathStr\n        /* no ghPersonalAccessToken*/\n    )\n} catch (error) {\n    console.log(error)\n}\nexpect(spy1).to.have.been.called()\nexpect(spy2).to.have.been.called()\nexpect(spy3).to.have.been.called()\nchai.spy.restore(shHelper, 'exec')",
                  "err": {},
                  "uuid": "b418ea66-d726-4688-b59c-99fffef034cb",
                  "parentUUID": "a1a72d77-12c2-4322-9232-5da46a1bdadc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae79362b-4f29-4cdb-a067-f638f5ceeada",
                "b418ea66-d726-4688-b59c-99fffef034cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc084394-749d-4563-95d7-c75681d15766",
          "title": "webhook github",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/webhook/github.spec.js",
          "file": "/test/webhook/github.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef1838b1-af6d-4d56-8a20-17723b3a9de0",
              "title": "generateRepoTreeURL",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/webhook/github.spec.js",
              "file": "/test/webhook/github.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate the correct url with recursive param default to true",
                  "fullTitle": "webhook github generateRepoTreeURL should generate the correct url with recursive param default to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = generateRepoTreeURL({ owner, repo, branch })\nconst expected = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=${true}`\nexpect(actual).to.equal(expected)",
                  "err": {},
                  "uuid": "13e39b06-181e-48fe-96d1-4cf0efa2f9c2",
                  "parentUUID": "ef1838b1-af6d-4d56-8a20-17723b3a9de0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate the correct url with recursive param set to false",
                  "fullTitle": "webhook github generateRepoTreeURL should generate the correct url with recursive param set to false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = generateRepoTreeURL({ owner, repo, branch, recursive: false })\nconst expected = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=${false}`\nexpect(actual).to.equal(expected)",
                  "err": {},
                  "uuid": "7353f371-43c9-47da-9755-20988b0c1c79",
                  "parentUUID": "ef1838b1-af6d-4d56-8a20-17723b3a9de0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when one or more param is missing",
                  "fullTitle": "webhook github generateRepoTreeURL should throw error when one or more param is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => { generateRepoTreeURL() }).to.throw('Missing one or more parameters')",
                  "err": {},
                  "uuid": "c7f97ec8-118f-483d-85fc-3819d139fc5b",
                  "parentUUID": "ef1838b1-af6d-4d56-8a20-17723b3a9de0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13e39b06-181e-48fe-96d1-4cf0efa2f9c2",
                "7353f371-43c9-47da-9755-20988b0c1c79",
                "c7f97ec8-118f-483d-85fc-3819d139fc5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b5f4bb0-615b-4e6f-bedc-4125869bb077",
              "title": "getRepoFilePath",
              "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/webhook/github.spec.js",
              "file": "/test/webhook/github.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get a list of file paths",
                  "fullTitle": "webhook github getRepoFilePath should get a list of file paths",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// When you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nnock(baseURL).get(getPath).reply(200, data)\nconst actual = await getRepoFilePaths(url)\nconst expected = data.tree.map(item => item.path)\n// Use .eql in order to deeply compare values regardless of order\n// https://stackoverflow.com/a/17527174/16961611\nexpect(actual).to.eql(expected)",
                  "err": {},
                  "uuid": "03294f88-4ac2-4bcf-b31c-f1967c2a29a2",
                  "parentUUID": "3b5f4bb0-615b-4e6f-bedc-4125869bb077",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get a list of file paths filtered by extension name",
                  "fullTitle": "webhook github getRepoFilePath should get a list of file paths filtered by extension name",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "nock(baseURL).get(getPath).reply(200, data)\nconst fileType = 'c'\nconst actual = await getRepoFilePaths(url, { fileType })\nconst expected = data.tree.map(item => item.path).filter(path => path.split('.').pop() === fileType)\nexpect(actual).to.eql(expected)",
                  "err": {},
                  "uuid": "39781910-0da5-4e82-ad9c-595161f64a3f",
                  "parentUUID": "3b5f4bb0-615b-4e6f-bedc-4125869bb077",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should thrown an error if tree size is maxed out",
                  "fullTitle": "webhook github getRepoFilePath should thrown an error if tree size is maxed out",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const truncatedData = { ...data, truncated: true }\nnock(baseURL).get(getPath).reply(200, truncatedData)\ntry {\n    await getRepoFilePaths(url)\n} catch (err) {\n    expect(err.message).to.equal(errorResponse['EXCEED_GITHUB_TREE_LIMIT'].message)\n}",
                  "err": {},
                  "uuid": "286946d7-501b-48a8-aa5c-8e6e0f0be7bd",
                  "parentUUID": "3b5f4bb0-615b-4e6f-bedc-4125869bb077",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03294f88-4ac2-4bcf-b31c-f1967c2a29a2",
                "39781910-0da5-4e82-ad9c-595161f64a3f",
                "286946d7-501b-48a8-aa5c-8e6e0f0be7bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93dac74a-2222-4436-b495-4b8805ef0e28",
          "title": "webhook sh",
          "fullFile": "/Users/deepgill/CPSC-319/TerraScanBackEnd/test/webhook/sh.spec.js",
          "file": "/test/webhook/sh.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should execute echo command",
              "fullTitle": "webhook sh should execute echo command",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testString = 'This is a test'\nconst { stdout, stderr } = await shHelper.exec(`echo ${testString}`)\nexpect(stdout).to.equal(testString + '\\n')\nexpect(stderr).to.equal('')",
              "err": {},
              "uuid": "2148d061-e09e-4193-b76f-6f51543e6bb8",
              "parentUUID": "93dac74a-2222-4436-b495-4b8805ef0e28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should thrown error for unknown command",
              "fullTitle": "webhook sh should thrown error for unknown command",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await shHelper.exec('notGit status')\n} catch (error) {\n    expect(error.message.includes('command not found')).to.be.true\n}",
              "err": {},
              "uuid": "fa06994d-a8ce-4356-aeed-96a9dbe4447e",
              "parentUUID": "93dac74a-2222-4436-b495-4b8805ef0e28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2148d061-e09e-4193-b76f-6f51543e6bb8",
            "fa06994d-a8ce-4356-aeed-96a9dbe4447e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}